% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SecretsEnv.R
\name{SecretsEnv}
\alias{SecretsEnv}
\title{Secrets Environment Class}
\description{
A class to manage and validate API credentials and secrets.
}
\details{
Secrets Environment Class

The SecretsEnv class handles validation of API credentials stored in a secrets file.
It checks for the presence of required variables, validates their types, and ensures
they are properly formatted.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{config_specs}}{List of specifications for each API}

\item{\code{secrets_file}}{Path to the secrets file}

\item{\code{config}}{Configuration object loaded from config.yml}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SecretsEnv-new}{\code{SecretsEnv$new()}}
\item \href{#method-SecretsEnv-get_configured_apis}{\code{SecretsEnv$get_configured_apis()}}
\item \href{#method-SecretsEnv-validate_config}{\code{SecretsEnv$validate_config()}}
\item \href{#method-SecretsEnv-clone}{\code{SecretsEnv$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SecretsEnv-new"></a>}}
\if{latex}{\out{\hypertarget{method-SecretsEnv-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new SecretsEnv object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SecretsEnv$new(secrets_file = "secrets.R", config_file = "config.yml")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{secrets_file}}{Path to the secrets file}

\item{\code{config_file}}{Path to the configuration file}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new SecretsEnv object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SecretsEnv-get_configured_apis"></a>}}
\if{latex}{\out{\hypertarget{method-SecretsEnv-get_configured_apis}{}}}
\subsection{Method \code{get_configured_apis()}}{
Determine which APIs are configured
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SecretsEnv$get_configured_apis()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Character vector of configured API names
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SecretsEnv-validate_config"></a>}}
\if{latex}{\out{\hypertarget{method-SecretsEnv-validate_config}{}}}
\subsection{Method \code{validate_config()}}{
Validate the configuration for a specific API
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SecretsEnv$validate_config(api_type)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_type}}{The API type to validate}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
TRUE if validation passes
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SecretsEnv-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SecretsEnv-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SecretsEnv$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
